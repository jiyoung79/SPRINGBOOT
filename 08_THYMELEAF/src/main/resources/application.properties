spring.application.name=app

#Tomcat Server Port Setting
server.port=8080

#UTF-8 Setting
spring.servlet.filter.encoding.filter-name=encodingFilter
spring.servlet.filter.encoding.filter-class=org.springframework.web.filter.CharacterEncodingFilter
spring.servlet.filter.encoding.init-param.encoding=UTF-8
spring.servlet.filter.encoding.init-param.forceEncoding=true
spring.servlet.filter.encoding.url-pattern=/*

# JSP Setting
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp
# JSP Auto-Configuration
server.servlet.jsp.init-parameters.development=true

##DATASOURCE
#spring.datasource.url=jdbc:mysql://localhost:3306/bookdb
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.username=root
#spring.datasource.password=1234


# ---------------------------------------------------
# JPA
# ---------------------------------------------------
# Hibernate가 데이터베이스 스키마를 자동으로 생성 또는 업데이트할 때의 동작을 설정하는 데 사용
# update : 데이터베이스 스키마를 변경하지 않고, 새로운 필드를 추가하거나 기존 필드를 수정하는 등의 작업이 발생할 때 이를 반영
# validate : Hibernate는 현재 데이터베이스 스키마와 엔터티 클래스를 비교하고 일치하지 않으면 예외를 발생
# create : Hibernate는 현재 엔터티 클래스를 기반으로 데이터베이스 스키마를 새로 생성합니다. 기존의 데이터베이스 스키마는 삭제
# create-drop : 애플리케이션 시작 시에 데이터베이스 스키마를 생성하고, 애플리케이션 종료 시에는 해당 스키마를 삭제합니다. 주로 테스트 환경에서 사용
# none : Hibernate은 자동으로 스키마를 생성 또는 업데이트하지 않습니다. 개발자가 수동으로 데이터베이스 스키마를 관리해야 합니다
spring.jpa.hibernate.ddl-auto=update
# Hibernate가 생성하는 SQL 쿼리를 콘솔에 출력
spring.jpa.properties.hibernate.format_sql=true
# Hibernate에서 JDBC 배치 처리를 사용할 때 한 번에 실행되는 JDBC 명령의 수를 지정(1000 == 1000개의 SQL명령어)
spring.jpa.properties.hibernate.jdbc.batch_size=1000
# Hibernate가 INSERT 쿼리를 일괄 처리할 때, 데이터베이스에 대해 명시적인 순서를 유지
spring.jpa.properties.hibernate.order_inserts=true
# Hibernate가 UPDATE 쿼리를 일괄 처리할 때, 데이터베이스에 대해 명시적인 순서를 유지
spring.jpa.properties.hibernate.order_updates=true
#  Hibernate가 일괄 처리로 데이터를 업데이트할 때, 버전화된(Versioned) 엔터티(두개 이상 트랜잭션이 동일한 엔터티를 동시에 수정하려고 할때 버전 정보를 통해 충돌을 감지하고 처리하는 매커니즘)에 대해 특정한 최적화를 적용하도록 하는 옵션
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true

# ---------------------------------------------------
#JPA FOREIGN KEY PERMIT
# ---------------------------------------------------
# Hibernate가 사용하는 데이터베이스의 방언(Dialect)을 지정하는 역할
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect
# Hibernate에 대한 데이터베이스 플랫폼을 MySQL로 설정
spring.jpa.database-platform = org.hibernate.dialect.MySQLDialect

# ---------------------------------------------------
#JPA SQL INIT
# ---------------------------------------------------
# Spring Boot 애플리케이션이 시작될 때 SQL 초기화 스크립트를 실행하도록 하는 옵션
# always : 항상 / embedded : 내장DB사용시만 / never : SQL스크립트 사용안함 / resource : 클래스패스 상의 schema.sql 및 data.sql과 같은 초기화 스크립트를 실행
spring.sql.init.mode=always

# DataSource 초기화를 지연시키는 옵션 / Spring Boot 애플리케이션이 시작될 때 데이터 소스를 초기화하는 시점을 나중으로 미룹니다.
spring.jpa.defer-datasource-initialization=true

# THYMELEAF
spring.thymeleaf.prefix:classpath:/templates/
spring.thymeleaf.suffix:.html
spring.thymeleaf.mode: HTML5
spring.thymeleaf.cache:false

spring.thymeleaf.view-names:th/*